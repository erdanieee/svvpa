#!/bin/bash

### BEGIN INIT INFO
# Provides:          SVVPA-service
# Required-Start:    $local_fs $remote_fs $network $syslog $named $all
# Required-Stop:     $local_fs $remote_fs $network $syslog $named $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     false
# Short-Description: Controla las acciones a realizar por SVVPA
# Description:       Servicio para controlar SVVPA. Este script está pensado para ser llamado con el comando "sudo service SVVPA-service args". Para ello, se debe crear previamente un link en "/etc/ini.d" y ejecutar el comando "sudo update-rc.d SVVPA-service defaults 99"
### END INIT INFO



function getMysqlVal(){ r="NULL"; if [[ "$1" ]]; then r="'$1'"; fi; echo $r; }
function getGoogleSpVal(){ r=""; if [[ "$1" != "NULL" ]]; then r="$1"; fi; echo ${r/\./\,}; }


#. /lib/lsb/init-functions

#comprueba si se llama directamente el ejecutable o se hace a través de un link (/etc/inid.d) para que se encuentren correctamente los demás archivos del directorio ${BIN_DIR}
link=$(readlink $0)
if [[ "${link}" ]]
then	
	path=$(dirname $link)		
else
	path=$(dirname $0)
fi

cd $path
source CONSTANTS.sh
touch ${LOG_FILE} 
chmod 666 ${LOG_FILE}
exec &> >(tee -a ${LOG_FILE})


cd ${BIN_DIR}
RETVAL=0
case $1 in


	# Apagar servicio. Se ejecuta automáticamente por Linux cuando se apaga el sistema (init 0 1 6)
	stop|notify_shutdown)
		echo "[$(date)] $0: Servicio '$1': El sistema se está apagando"
		python -u _notificator.py "ON_SHUTDOWN"
		RETVAL=$(($RETVAL|$?))
	;;




	# Encender servicio. Se ejecuta automáticamente por Linux cuando se inicia el sistema (init 2 3 4 5)
	start|notify_startup)
		echo "[$(date)] $0: Servicio '$1': El sistema se está arrancando"
		
		#start motion
		#sudo /home/pi/software/motion-mmal/motion -c /etc/motion/motion.conf &
		sudo /usr/sbin/service motion start
		
		#start _telegram_bot
		python -u _telegram_bot.py &

		python -u _notificator.py "ON_STARTUP"
		RETVAL=$(($RETVAL|$?))
	;;
	




	# Este comando se llama cuando MOTION no puede acceder a la cámara. Se ejecuta cuando se activa el envento 'on_camera_lost' del archivo de configuración motion.conf
	notify_camera_lost)
		echo "[$(date)] $0: Servicio '$1': La conexión con la cámara se ha perdido"
		python -u _notificator.py "ON_CAMERA_FAILURE"
		RETVAL=$(($RETVAL|$?))
	;;




	check_telegram_service)
		pid=$(ps aux|grep 'python'|grep '_telegram_bot.py'|grep -v 'grep'| awk '{print $2}')

		if [[ "${TELEGRAM_BOT^^}" == "ON" && ! "${pid}" ]]
		then
			echo "[$(date)] $0: Servicio '$1': Arrancando servicio telegram"
			python -u _telegram_bot.py &
		
		elif [[ "${TELEGRAM_BOT^^}" == "OFF" && "${pid}" ]]
		then
			echo "[$(date)] $0: Servicio '$1': Cerrando servicio telegram"
			sudo kill ${pid}
		fi

	;;





	# Comprueba estado de MOTION
	check_services)
		echo "[$(date)] $0: Servicio '$1': Comprobando estado de los servicios requeridos por SVVPA"
		sudo /usr/sbin/service motion status
        #ps aux|egrep "\bmotion\b"|grep -v 'grep'
		RETVAL=$(($RETVAL|$?))

		sudo /usr/sbin/service apache2 status
		RETVAL=$(($RETVAL|$?))
	;;





	# Se comprueba si hay nuevos comandos email y los ejecuta si son correctos. Este servicio debe ser llamado frecuentemente utilizando cron
	check_cmd_email)
		echo "[$(date)] $0: Servicio '$1': Se está comprobando si hay nuevos commandos email"
		python -u _processCmdEmail.py
		RETVAL=$(($RETVAL|$?))	
 	;;
	





	# Comprueba el espacio en disco disponible, y si es menor de un límite prefijado, borra vídeos antiguos. Este comando se llama desde MOTION cuando se activa el envento 'on_movie_start'. Adicionalmente puede ser llamado desde cron
	check_disk_space)
		echo "[$(date)] $0: Servicio '$1': Comprobación de espacio libre en disco"
		python -u _diskSpaceControl.py
		RETVAL=$(($RETVAL|$?))
	;;


	
	update_internetUsage)
	    echo "[$(date)] $0: Servicio '$1': Actualizando tráfico de internet"

	    in=$(sudo iptables -L INTERNET_IN -vnxZ --line-numbers|egrep '^1'|awk '{print $3}')
	    out=$(sudo iptables -L INTERNET_OUT -vnxZ --line-numbers|egrep '^1'|awk '{print $3}')
	    sqlStm=$(echo "insert into internetUsage (bytes_in, bytes_out) values ($(getMysqlVal $in), $(getMysqlVal $out))")

		mysql -u ${MYSQL_USER} -p${MYSQL_PASS} ${MYSQL_DB} < <(echo $sqlStm)
		RETVAL=$(($RETVAL|$?))
	;;






#	# Actualiza la IP en duckdns.org y en google drive. Este comando es útil cuando SVVPA tiene acceso desde el exterior (IP pública real), pero no tiene IP fija. Si se desea actualizar, debería llamarse tras cada reconexión o un par de veces al día desde cron
#	update_ip)
#		echo "[$(date)] $0: Servicio '$1': Actualizando IP"
#		echo url="https://www.duckdns.org/update?domains=${DUCKDNS_DOMAIN}&token=${DUCKDNS_TOKEN}&ip=" | curl -s -k -K -
#		RETVAL=$(($RETVAL|$?))
#
#		ip=$(wget "http://ipecho.net/plain" -qO -)
#		RETVAL=$(($RETVAL|$?))
#
#		echo "http://${DUCKDNS_DOMAIN}.duckdns.org:${APACHE_PORT}" > ${CURRENT_IP_FILE} 
#		echo "http://${ip}:${APACHE_PORT}" >> ${CURRENT_IP_FILE}
#		RETVAL=$(($RETVAL|$?))
#
#		${RCLONE_BIN} --config ${RCLONE_CONFIG} copy ${CURRENT_IP_FILE} google:SVVPA/ 2>&1
#		RETVAL=$(($RETVAL|$?))
#	;;
	





	# Actualiza MYSQL con los datos de los sensores. Este comando está pensado para ser llamado desde cron
	update_sensors)
		echo "[$(date)] $0: Servicio '$1': Actualizando sensores"
		cpuTemp="$(sudo ./_readInternalTemp.sh)"
		RETVAL=$(($RETVAL|$?))

		bmp180Val="$(python -u _readBmp180.py)"
		RETVAL=$(($RETVAL|$?))

		#dht22Val="$(sudo python -u _readDht22.py)"
		dht22Val="$(sudo ./_readSi7021)"
                RETVAL=$(($RETVAL|$?))
	
		bmp180Pres="$(echo $bmp180Val|awk '{print $2}')"
		bmp180Temp="$(echo $bmp180Val|awk '{print $1}')"
		dht22Temp="$(echo $dht22Val|awk '{print $1}')"
		dht22Hr="$(echo $dht22Val|awk '{print $2}')"

		sqlStm=$(echo "insert into sensors (CPU_temp, BMP180_temp, BMP180_press, DHT22_temp, DHT22_HR) values ($(getMysqlVal $cpuTemp), $(getMysqlVal $bmp180Temp), $(getMysqlVal $bmp180Pres), $(getMysqlVal $dht22Temp), $(getMysqlVal $dht22Hr))")

		mysql -u ${MYSQL_USER} -p${MYSQL_PASS} ${MYSQL_DB} < <(echo $sqlStm)
		RETVAL=$(($RETVAL|$?))
	;;



	# Actualiza los servidores (google spreadsheet, plotly, ...) con los datos de los sensores. Este comando está pensado para ser llamado desde cron
	update_online_sensors)
		echo "[$(date)] $0: Servicio '$1': Actualizando sensores en servidor remoto"

		if [[ $# -gt 1 ]]
		then
			avg=$2	#número de muestras sobre el que se calculan los datos de los sensores
			query="select avg(x) from (select XXX as x from sensors order by date desc limit $avg) sensors"

			#datetime=$( mysql -u ${MYSQL_USER} -p${MYSQL_PASS} ${MYSQL_DB} < <(echo "select date from sensors order by date desc limit 1") --skip-column-names )
			cpuTemp=$( mysql -u ${MYSQL_USER} -p${MYSQL_PASS} ${MYSQL_DB} < <(echo "${query/XXX/CPU_temp}") --skip-column-names )
			bmp180Temp=$( mysql -u ${MYSQL_USER} -p${MYSQL_PASS} ${MYSQL_DB} < <(echo "${query/XXX/BMP180_temp}") --skip-column-names )
			bmp180Pres=$( mysql -u ${MYSQL_USER} -p${MYSQL_PASS} ${MYSQL_DB} < <(echo "${query/XXX/BMP180_press}") --skip-column-names )
			dht22Temp=$( mysql -u ${MYSQL_USER} -p${MYSQL_PASS} ${MYSQL_DB} < <(echo "${query/XXX/DHT22_temp}") --skip-column-names )
			dht22Hr=$( mysql -u ${MYSQL_USER} -p${MYSQL_PASS} ${MYSQL_DB} < <(echo "${query/XXX/DHT22_HR}") --skip-column-names )

			if [[ "${SENSOR_GOOGLE_SHEET}" == "ON" ]]
			then
				python -u _updateGoogleSpreadsheetSensors.py "$(getGoogleSpVal $cpuTemp)" "$(getGoogleSpVal $bmp180Temp)" "$(getGoogleSpVal $bmp180Pres)" "$(getGoogleSpVal $dht22Temp)" "$(getGoogleSpVal $dht22Hr)" 
				RETVAL=$(($RETVAL|$?))
			fi

			#if [[ "${SENSOR_PLOTLY}" == "ON" ]]
			#then
			#	RETVAL=$(($RETVAL|$?))
			#fi
		else
			echo "[$(date)] $0: Servicio '$1': ERROR! Invalid number of arguments: $#"
			RETVAL=1
		fi
	;;



	# Procesa la imagen capturada desde MOTION. Este commando está pensado para ser llamado desde el envento 'on_picture_save' de MOTION
	process_image)
		echo "[$(date)] $0: Servicio '$1': Procesando imagen $2"

		if [[ $# -gt 1 ]]
		then
			fileIn=$2
			mkdir -p ${MOTION_DIR} 2>/dev/null

			#test snapshot vs ordinary motion picture
			if [[ "$(echo $fileIn|egrep '([0-9_]+){12,}')" ]]
			then
				sqlStm=$(echo "insert into images (id) values ('$(basename ${fileIn:: -4})')")
				mysql -u ${MYSQL_USER} -p${MYSQL_PASS} ${MYSQL_DB} < <(echo $sqlStm)
				RETVAL=$(($RETVAL|$?))

				#Sube automáticamente a google drive y actualiza mysql con el link y el tamaño de la imagen.
				python -u _google_drive_uploader.py $fileIn
				RETVAL=$(($RETVAL|$?))

				#pausa necesaria porque aveces google tarda un poco en procesar las imágenes
				sleep 5

				#Manda notificación (por telegram y/o email según configuración)
				python -u _notificator.py "ON_MOTION" $fileIn
				RETVAL=$(($RETVAL|$?))							
			fi
		
			chmod 666 $fileIn
			RETVAL=$(($RETVAL|$?))

			chown pi:www-data $fileIn
			RETVAL=$(($RETVAL|$?))

			mv $fileIn ${MOTION_DIR}$(basename $fileIn)
			RETVAL=$(($RETVAL|$?))

		else
			echo "[$(date)] $0: Servicio '$1': ERROR! Invalid number of arguments: $#"
			RETVAL=1
		fi
	;;







	# Procesa el vídeo capturado desde MOTION. Este commando está pensado para ser llamado desde el envento 'on_movie_end' de MOTION
	process_video)
		echo "[$(date)] $0: Servicio '$1': Procesando video $2"
		fileIn=$2

		if [[ $# -gt 1 ]]
		then
			if [[ ! -e $fileIn || ! -f $fileIn ]]
			then
				echo "[$(date)] $0: Servicio '$1': ERROR! Archivo de origen no existe o es un directorio: $fileIn"
				RETVAL=1
				
			else
				mkdir -p ${MOTION_DIR} 2>/dev/null

        		#Guarda en MySQL ID
				id=$(basename ${fileIn:: -4})
				sqlStm=$(echo "insert into videos (id) values ('${id}')" )
				mysql -u ${MYSQL_USER} -p${MYSQL_PASS} ${MYSQL_DB} < <(echo $sqlStm)
				RETVAL=$(($RETVAL|$?))
				
				fileOut=${MOTION_DIR}$( basename ${fileIn/\.${MOTION_VIDEO_EXT_RAW}/\.${MOTION_VIDEO_EXT}} )
				#TODO: usar avconv que está en los repositorios 
				#ej: avconv -i video.avi -c:v h264 -crf 22 -preset ultrafast -y -loglevel error video.mp4
				${FFMPEG_BIN} -loglevel error -i $fileIn -preset ultrafast -y ${fileOut}	
				RETVAL=$(($RETVAL|$?))

				if [[ ! -e $fileOut || ! -f $fileOut ]]
				then
					echo "[$(date)] $0: Servicio '$1': ERROR! La conversión del archivo $fileIn ha fallado"
					RETVAL=1

				else
					size=$(du -b $fileOut|awk '{print $1}')
					duration=$( ${FFMPEG_BIN} -i $fileOut 2>&1|egrep -o "Duration: [0-9:]+"|egrep -o "[0-9]{2}:[0-9]{2}$" )
					#Guarda en MySQL tamaño y duración del vídeo
					sqlStm=$( echo "update videos set size=${size}, duration='${duration}' where id like '${id}'" )
					mysql -u ${MYSQL_USER} -p${MYSQL_PASS} ${MYSQL_DB} < <(echo $sqlStm)
					RETVAL=$(($RETVAL|$?))

					chmod 666 $fileOut
					RETVAL=$(($RETVAL|$?))

					chown pi:www-data $fileOut
					RETVAL=$(($RETVAL|$?))
					
					rm -f $fileIn 
					RETVAL=$(($RETVAL|$?))	
				fi
			fi

		else
			echo "[$(date)] $0: Servicio '$1': ERROR! Invalid number of arguments: $#"
			RETVAL=1			
		fi
	;;
	




	# Error en el comando...
	*)
 		echo "[$(date)] $0: Comando '$1' no reconocido"	
		RETVAL=99
	esac

if [[ ! $RETVAL -eq 0 ]]
then
	echo "[$(date)] $0: Servicio '$1': ERROR! El servicio acabó con errores"
fi

exit ${RETVAL}

